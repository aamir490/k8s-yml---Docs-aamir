

######################################################
#           Statefulset    OORR   Stateless
######################################################

# Deployment are usually used or 'stateless applications'

# Statefulset::- >>>>))
#      r aplictions that store data and keep tracking it. All databases, such as MySQL, Oracle, and PostgreSQL, r exmle of stateful applin. 

# Stateless  ::- >>>>))
#      r aplictions,do not keep the data. Node.js & Nginx r exmpls of stateless aplictins. For each request, the stateless application will receive new data and process it.

# StatefulSet :- A StatefulSet is the k8s controller used to run the stateful application as containers (Pods) in the k8s cluster. 
#  StatefulSets assign a sticky identity—an ordinal number starting from zero—to each Pod instead of assigning random IDs for each replica Pod.
#  A new Pod is created by cloning the previous Pod’s data. If the previous Pod is in the pending state, then the new Pod will not be created. 
#  If you delete a Pod, it will delete the Pod in reverse order, not in random order. 


#--------------------------------------------------------------------------------------------------------------------------------
--- #
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongod
  namespace: test-ns  # IF 'test-ns' not creat, 1st create namesapce of this name 'test-ns' . $ kubectl create ns test-ns
spec:
  selector:
    matchLabels:
      app: mongod
  serviceName: mongodb-service
  replicas: 2
  template:
    metadata:
      labels:
        app: mongod
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: mongodb-container
        image: mongo
        command:
         - "mongod"
         - "--bind_ip"
         - "--replSet"
         - "MainRepSet"
        resources:
          requests:
            cpu: 200m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        ports:
        - containerPort: 27017
          name: mongo-cont
        volumeMounts:
        - name: mongodb-persistent-storage-claim
          mountPath: "/data/db"
  volumeClaimTemplates:
  - metadata:
      name: mongodb-persistent-storage-claim
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
--- #
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: test-ns
spec:
  type: ClusterIP
  selector:
    app: mongod
  ports:
  - port: 27017
    targetPort: 27017
...
#---------------------------------------------------------------------------------------------------------------------